#Использовать asserts
#Использовать compressor

&Тест
Процедура Должен_ПроверитьУпаковкуРаспаковкуДвоичныхДанныхВДвоичныеДанные() Экспорт

	Компрессоры = Компрессоры();
	ИсходныеДанные = ТестовыеДвоичныеДанные();

	Для Каждого Компрессор Из Компрессоры Цикл
		УпакованныеДанные = Компрессор.Упаковать(ИсходныеДанные);
		РаспакованныеДанные = Компрессор.Распаковать(УпакованныеДанные);
		
		Ожидаем.Что(РаспакованныеДанные, Компрессор).Равно(ИсходныеДанные);
	КонецЦикла;

КонецПроцедуры

&Тест
Процедура Должен_ПроверитьУпаковкуСУказаниемУровняСжатия() Экспорт

	ИсходныеДанные = ТестовыеДвоичныеДанные();

	Компрессоры = Новый Массив();
	Компрессоры.Добавить(Новый GZipКомпрессор(УровеньСжатияДанных.Оптимальный));
	Компрессоры.Добавить(Новый GZipКомпрессор(УровеньСжатияДанных.Быстрый));
	Компрессоры.Добавить(Новый GZipКомпрессор(УровеньСжатияДанных.БезСжатия));

	Компрессоры.Добавить(Новый DeflateКомпрессор(УровеньСжатияДанных.Оптимальный));
	Компрессоры.Добавить(Новый DeflateКомпрессор(УровеньСжатияДанных.Быстрый));
	Компрессоры.Добавить(Новый DeflateКомпрессор(УровеньСжатияДанных.БезСжатия));

	Компрессоры.Добавить(Новый LZ4Компрессор(УровеньСжатияДанныхLZ4.L00_FAST));
	Компрессоры.Добавить(Новый LZ4Компрессор(УровеньСжатияДанныхLZ4.L03_HC));
	Компрессоры.Добавить(Новый LZ4Компрессор(УровеньСжатияДанныхLZ4.L04_HC));
	Компрессоры.Добавить(Новый LZ4Компрессор(УровеньСжатияДанныхLZ4.L05_HC));
	Компрессоры.Добавить(Новый LZ4Компрессор(УровеньСжатияДанныхLZ4.L06_HC));
	Компрессоры.Добавить(Новый LZ4Компрессор(УровеньСжатияДанныхLZ4.L07_HC));
	Компрессоры.Добавить(Новый LZ4Компрессор(УровеньСжатияДанныхLZ4.L08_HC));
	Компрессоры.Добавить(Новый LZ4Компрессор(УровеньСжатияДанныхLZ4.L09_HC));
	Компрессоры.Добавить(Новый LZ4Компрессор(УровеньСжатияДанныхLZ4.L10_OPT));
	Компрессоры.Добавить(Новый LZ4Компрессор(УровеньСжатияДанныхLZ4.L11_OPT));
	Компрессоры.Добавить(Новый LZ4Компрессор(УровеньСжатияДанныхLZ4.L12_MAX));

	Компрессоры.Добавить(Новый ZstdКомпрессор(УровеньСжатияДанныхZstd.БезСжатия));
	Компрессоры.Добавить(Новый ZstdКомпрессор(УровеньСжатияДанныхZstd.Быстрый));
	Компрессоры.Добавить(Новый ZstdКомпрессор(УровеньСжатияДанныхZstd.ПоУмолчанию));
	Компрессоры.Добавить(Новый ZstdКомпрессор(УровеньСжатияДанныхZstd.Оптимальный));
	Компрессоры.Добавить(Новый ZstdКомпрессор(УровеньСжатияДанныхZstd.НаименьшийРазмер));

	Компрессоры.Добавить(Новый ZstdКомпрессор(-131072));
	Компрессоры.Добавить(Новый ZstdКомпрессор(-22));
	Компрессоры.Добавить(Новый ZstdКомпрессор(-1));
	Компрессоры.Добавить(Новый ZstdКомпрессор(3));
	Компрессоры.Добавить(Новый ZstdКомпрессор(2));

	Компрессоры.Добавить(Новый SnappyКомпрессор(УровеньСжатияДанных.Оптимальный));
	Компрессоры.Добавить(Новый SnappyКомпрессор(УровеньСжатияДанных.Быстрый));
	Компрессоры.Добавить(Новый SnappyКомпрессор(УровеньСжатияДанных.БезСжатия));

	Если МажорнаяВерсия() = "2" Тогда
		Компрессоры.Добавить(Новый ZLibКомпрессор(УровеньСжатияДанных.Оптимальный));
		Компрессоры.Добавить(Новый ZLibКомпрессор(УровеньСжатияДанных.Быстрый));
		Компрессоры.Добавить(Новый ZLibКомпрессор(УровеньСжатияДанных.БезСжатия));
	КонецЕсли;

	Для Каждого Компрессор Из Компрессоры Цикл
		УпакованныеДанные = Компрессор.Упаковать(ИсходныеДанные);
		РаспакованныеДанные = Компрессор.Распаковать(УпакованныеДанные);

		Ожидаем.Что(РаспакованныеДанные, Компрессор).Равно(ИсходныеДанные);
	КонецЦикла;

КонецПроцедуры

&Тест
Процедура Должен_ПроверитьУпаковкуРаспаковкуДвоичныхДанныхВПоток() Экспорт

	Компрессоры = Компрессоры();
	ИсходныеДанные = ТестовыеДвоичныеДанные();

	Для Каждого Компрессор Из Компрессоры Цикл
		Поток = Новый ПотокВПамяти();
		Компрессор.Упаковать(ИсходныеДанные, Поток);
		УпакованныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();

		Поток = Новый ПотокВПамяти();
		Компрессор.Распаковать(УпакованныеДанные, Поток);
		РаспакованныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();

		Ожидаем.Что(РаспакованныеДанные, Компрессор).Равно(ИсходныеДанные);
	КонецЦикла;

КонецПроцедуры

&Тест
Процедура Должен_ПроверитьУпаковкуРаспаковкуПотокаВДвоичныеДанные() Экспорт

	Компрессоры = Компрессоры();
	ИсходныеДанные = ТестовыеДвоичныеДанные();

	Для Каждого Компрессор Из Компрессоры Цикл
		Буфер = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ИсходныеДанные);
		Поток = Новый ПотокВПамяти(Буфер);
		УпакованныеДанные = Компрессор.Упаковать(Поток);

		Буфер = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(УпакованныеДанные);
		Поток = Новый ПотокВПамяти(Буфер);
		РаспакованныеДанные = Компрессор.Распаковать(Поток);

		Ожидаем.Что(РаспакованныеДанные, Компрессор).Равно(ИсходныеДанные);
	КонецЦикла;

КонецПроцедуры

&Тест
Процедура Должен_ПроверитьУпаковкуРаспаковкуПотокаВПоток() Экспорт

	Компрессоры = Компрессоры();
	ИсходныеДанные = ТестовыеДвоичныеДанные();

	Для Каждого Компрессор Из Компрессоры Цикл
		Буфер = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ИсходныеДанные);
		ВходящийПоток = Новый ПотокВПамяти(Буфер);
		ИсходящийПоток = Новый ПотокВПамяти();
		Компрессор.Упаковать(ВходящийПоток, ИсходящийПоток);

		Буфер = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ИсходящийПоток.ЗакрытьИПолучитьДвоичныеДанные());
		ВходящийПоток = Новый ПотокВПамяти(Буфер);
		ИсходящийПоток = Новый ПотокВПамяти();
		Компрессор.Распаковать(ВходящийПоток, ИсходящийПоток);
		РаспакованныеДанные = ИсходящийПоток.ЗакрытьИПолучитьДвоичныеДанные();

		Ожидаем.Что(РаспакованныеДанные, Компрессор).Равно(ИсходныеДанные);
	КонецЦикла;

КонецПроцедуры

Функция Компрессоры()
	Массив = Новый Массив();
	Массив.Добавить(Новый GZipКомпрессор());
	Массив.Добавить(Новый DeflateКомпрессор());
	Массив.Добавить(Новый BrotliКомпрессор());
	Массив.Добавить(Новый LZ4Компрессор());
	Массив.Добавить(Новый SnappyКомпрессор());
	Массив.Добавить(Новый ZstdКомпрессор());
	
	Если МажорнаяВерсия() = "2" Тогда
		Массив.Добавить(Новый ZLibКомпрессор());
	КонецЕсли;
	
	Возврат Массив;
КонецФункции

Функция ТестовыеДвоичныеДанные()
	Возврат ПолучитьДвоичныеДанныеИзСтроки("https://github.com/Stivo182/oscript-compressor");
КонецФункции

Функция МажорнаяВерсия()
	СИ = Новый СистемнаяИнформация();
	Возврат Лев(СИ.Версия, 1);
КонецФункции